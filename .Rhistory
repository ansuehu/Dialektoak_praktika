time.taken <- end.time - start.time
time.taken
start.time <- Sys.time()
b <- get_most_relevant_items_apply(answers, clusteringResult, c1, c2)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
get_most_relevant_items_apply <- function(datubasea, clusteringResult, c1, c2) {
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
diferentziazioak <- future_sapply(1:dim(datubasea)[1], function(galdera) {
kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
})
diferentziazioak[is.na(diferentziazioak)] <- -Inf
top3_indices <- sort(diferentziazioak, decreasing = TRUE, index.return = TRUE)$ix[1:3]
datubase_subset1 <- datubasea[, indices1, drop = FALSE]
datubase_subset2 <- datubasea[, indices2, drop = FALSE]
cluster1_items <- lapply(top3_indices, function(i) datubase_subset1[i, ])
cluster2_items <- lapply(top3_indices, function(i) datubase_subset2[i, ])
return(c(cluster1_items, cluster2_items))
}
start.time <- Sys.time()
b <- get_most_relevant_items_apply(answers, clusteringResult, c1, c2)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
start.time <- Sys.time()
a <- get_most_relevant_items(answers, clusteringResult, c1, c2)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
library(cluster)
bilbao_d <- function(items1, items2) {
bat <- sum(items1 %in% items2) + sum(items2 %in% items1)
result <- 1 - (bat / (length(items1) + length(items2)))
return(result)
}
kalkulatu_estabilitatea <- function(datubasea, membership, galdera, cluster) {
c <- cluster[[1]]
elementuak <- cluster[[2]]
n <- length(elementuak)
batura <- 0
pisuen_batura <- 0
for (i in 1:n) {
for (j in (i + 1):n) {
if (j > n) {
break
}
p_i <- elementuak[i]
p_j <- elementuak[j]
if (is.na(datubasea[galdera, p_i]) || is.na(datubasea[galdera, p_j]) ||
datubasea[galdera, p_i] == "" || datubasea[galdera, p_j] == "") {
distantzia <- 1
} else {
distantzia <- bilbao_d(strsplit(datubasea[galdera, p_i], ",")[[1]], strsplit(datubasea[galdera, p_j], ",")[[1]])
}
pisuak <- membership[p_i, c] * membership[p_j, c]
pisuen_batura <- pisuen_batura + pisuak
batura <- batura + distantzia * pisuak
}
}
if (pisuen_batura == 0) return(NA)
return(batura * 2 / pisuen_batura)
}
kalkulatu_bariabilitatea <- function(datubasea, membership, galdera, cluster1, cluster2) {
c1 <- cluster1[[1]]
elementuak1 <- cluster1[[2]]
c2 <- cluster2[[1]]
elementuak2 <- cluster2[[2]]
batura <- 0
pisuen_batura <- 0
for (i in elementuak1) {
for (j in elementuak2) {
if (is.na(datubasea[galdera, i]) || is.na(datubasea[galdera, j]) ||
datubasea[galdera, i] == "" || datubasea[galdera, j] == "") {
distantzia <- 1
} else {
distantzia <- bilbao_d(strsplit(datubasea[galdera, i], ",")[[1]],
strsplit(datubasea[galdera, j], ",")[[1]])
}
pisuak <- membership[i, c1] * membership[j, c2]
pisuen_batura <- pisuen_batura + pisuak
batura <- batura + distantzia * pisuak
}
}
return(ifelse(pisuen_batura > 0, batura / pisuen_batura, NA))
}
kalkulatu_diferentziazioa <- function(datubasea, membership, galdera, cluster1, cluster2) {
estabilitatea1 <- kalkulatu_estabilitatea(datubasea, membership, galdera, cluster1)
estabilitatea2 <- kalkulatu_estabilitatea(datubasea, membership, galdera, cluster2)
if (is.na(estabilitatea1) || is.na(estabilitatea2)) return(NA)
bariabilitatea1_2 <- kalkulatu_bariabilitatea(datubasea, membership, galdera, cluster1, cluster2)
return(bariabilitatea1_2 / max(estabilitatea1, estabilitatea2, 1e-6))
}
get_most_relevant_items <- function(datubasea, clusteringResult, c1, c2){
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
# indices1 <- c1[[2]]
# indices2 <- c2[[2]]
diferentziazioak <- numeric(length(datubasea))
for (galdera in 1:dim(datubasea)[1]) {
diferentziazioak[galdera] <- kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
}
sorted_indices <- order(diferentziazioak, decreasing = TRUE)
top3_items <- sorted_indices[1:3]
cluster1_items <- list()
for (i in 1:3){
cluster1_items[[i]] <- datubasea[top3_items[i], indices1]
}
cluster2_items <- list()
for (i in 1:3){
cluster2_items[[i]] <- datubasea[top3_items[i], indices2]
}
return(c(cluster1_items, cluster2_items))
}
get_most_relevant_items_apply <- function(datubasea, clusteringResult, c1, c2) {
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
diferentziazioak <- future_sapply(1:dim(datubasea)[1], function(galdera) {
kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
})
diferentziazioak[is.na(diferentziazioak)] <- -Inf
top3_indices <- sort(diferentziazioak, decreasing = TRUE, index.return = TRUE)$ix[1:3]
datubase_subset1 <- datubasea[, indices1, drop = FALSE]
datubase_subset2 <- datubasea[, indices2, drop = FALSE]
cluster1_items <- lapply(top3_indices, function(i) datubase_subset1[i, ])
cluster2_items <- lapply(top3_indices, function(i) datubase_subset2[i, ])
return(c(cluster1_items, cluster2_items))
}
get_most_relevant_items <- function(datubasea, clusteringResult, c1, c2){
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
# indices1 <- c1[[2]]
# indices2 <- c2[[2]]
diferentziazioak <- numeric(length(datubasea))
for (galdera in 1:dim(datubasea)[1]) {
diferentziazioak[galdera] <- kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
}
sorted_indices <- order(diferentziazioak, decreasing = TRUE)
top3_items <- sorted_indices[1:3]
cluster1_items <- list()
for (i in 1:3){
cluster1_items[[i]] <- datubasea[top3_items[i], indices1]
}
cluster2_items <- list()
for (i in 1:3){
cluster2_items[[i]] <- datubasea[top3_items[i], indices2]
}
return(c(cluster1_items, cluster2_items))
}
data <- read.csv('/Volumes/MacOS 1TB/Repos/Dialektoak_praktika-1/Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/Matriz-distancias del ESB-Diatech z-24-04-02.csv', stringsAsFactors = FALSE)
questions <- read.csv('/Volumes/MacOS 1TB/Repos/Dialektoak_praktika-1/Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/question.csv', stringsAsFactors = FALSE, row.names = 1)
answers <- as.matrix(read.csv('/Volumes/MacOS 1TB/Repos/Dialektoak_praktika-1/Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/ESB-datu-basea-taula.csv', stringsAsFactors = FALSE, row.names=1))
numericData <- data
numericData <- numericData[sapply(numericData, is.numeric)] # Filter numeric columns
numericData[is.na(numericData)] <- 0 # Replace NA with 0
distMatrix <- dist(numericData) # Compute distance matrix
clusteringResult <- fanny(distMatrix, k = 10, memb.exp = 1.2)
clusterLabels <- unique(clusteringResult$clustering)
c1 = 2
c2 = 4
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
diferentziazioak <- numeric(length(datubasea))
for (galdera in 1:dim(datubasea)[1]) {
diferentziazioak[galdera] <- kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
}
datubasea <- answers
datubasea <- answers
diferentziazioak <- numeric(length(datubasea))
for (galdera in 1:dim(datubasea)[1]) {
diferentziazioak[galdera] <- kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
}
sorted_indices <- order(diferentziazioak, decreasing = TRUE)
diferentziazioak <- numeric(length(datubasea))
for (galdera in 1:dim(datubasea)[1]) {
diferentziazioak[galdera] <- kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
}
sorted_indices <- order(diferentziazioak, decreasing = TRUE)
top3_items <- sorted_indices[1:3]
cluster1_items <- list()
for (i in 1:3){
cluster1_items[[i]] <- datubasea[top3_items[i], indices1]
}
cluster2_items <- list()
for (i in 1:3){
cluster2_items[[i]] <- datubasea[top3_items[i], indices2]
}
diferentziazioak
sorted_indices
length(datubasea)
length(datubasea[[0]])
length(datubasea)
datubasea
rows(datubasea)
length(dim(datubasea)
length(dim(datubasea))
length(dim(datubasea))
length(dim(datubasea))
length(NROW(datubasea))
NROW(datubasea)
diferentziazioak <- numeric(NROW(datubasea))
for (galdera in 1:dim(datubasea)[1]) {
diferentziazioak[galdera] <- kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
}
sorted_indices <- order(diferentziazioak, decreasing = TRUE)
top3_items <- sorted_indices[1:3]
cluster1_items <- list()
for (i in 1:3){
cluster1_items[[i]] <- datubasea[top3_items[i], indices1]
}
cluster2_items <- list()
for (i in 1:3){
cluster2_items[[i]] <- datubasea[top3_items[i], indices2]
}
sorted_indices
diferentziazioak
diferentziazioak[385]
datubasea[top3_items[1], indices1]
datubasea[1, indices1]
datubasea[1, indices2]
datubasea[18, indices1]
datubasea[18, indices2]
datubasea[19, indices1]
datubasea[19, indices2]
sorted_indices
top3_items
questions(top3_items)
questions[top3_items]
questions[top3_items[0]]
questions
questions <- read.csv('/Volumes/MacOS 1TB/Repos/Dialektoak_praktika-1/Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/question.csv', stringsAsFactors = FALSE, row.names = 1)
question
questions
questions <- read.csv('/Volumes/MacOS 1TB/Repos/Dialektoak_praktika-1/Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/question.csv', stringsAsFactors = FALSE)
questions
questions[1]
questions[[1]]
questions[[1]][1]
questions <- read.csv('/Volumes/MacOS 1TB/Repos/Dialektoak_praktika-1/Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/question.csv', stringsAsFactors = FALSE, sep = ";")
questions
questions[2]
questions[3]
questions[4]
questions <- read.csv('/Volumes/MacOS 1TB/Repos/Dialektoak_praktika-1/Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/question.csv', stringsAsFactors = FALSE, sep = ";")
questions <- questions[4]
questions[top3_items[0]]
questions
questions[1]
questions[[1]]
questions[[1]][1]
questions <- questions[4][[1]]
questions <- read.csv('/Volumes/MacOS 1TB/Repos/Dialektoak_praktika-1/Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/question.csv', stringsAsFactors = FALSE, sep = ";")
questions <- questions[4][[1]]
questions
questions[top3_items]
cluster1_items <- datubasea[top3_items, indices1]
View(cluster1_items)
cluster2_items <- datubasea[top3_items, indices2]
View(cluster1_items)
View(cluster2_items)
library(cluster)
bilbao_d <- function(items1, items2) {
bat <- sum(items1 %in% items2) + sum(items2 %in% items1)
result <- 1 - (bat / (length(items1) + length(items2)))
return(result)
}
kalkulatu_estabilitatea <- function(datubasea, membership, galdera, cluster) {
c <- cluster[[1]]
elementuak <- cluster[[2]]
n <- length(elementuak)
batura <- 0
pisuen_batura <- 0
for (i in 1:n) {
for (j in (i + 1):n) {
if (j > n) {
break
}
p_i <- elementuak[i]
p_j <- elementuak[j]
if (is.na(datubasea[galdera, p_i]) || is.na(datubasea[galdera, p_j]) ||
datubasea[galdera, p_i] == "" || datubasea[galdera, p_j] == "") {
distantzia <- 1
} else {
distantzia <- bilbao_d(strsplit(datubasea[galdera, p_i], ",")[[1]], strsplit(datubasea[galdera, p_j], ",")[[1]])
}
pisuak <- membership[p_i, c] * membership[p_j, c]
pisuen_batura <- pisuen_batura + pisuak
batura <- batura + distantzia * pisuak
}
}
if (pisuen_batura == 0) return(NA)
return(batura * 2 / pisuen_batura)
}
kalkulatu_bariabilitatea <- function(datubasea, membership, galdera, cluster1, cluster2) {
c1 <- cluster1[[1]]
elementuak1 <- cluster1[[2]]
c2 <- cluster2[[1]]
elementuak2 <- cluster2[[2]]
batura <- 0
pisuen_batura <- 0
for (i in elementuak1) {
for (j in elementuak2) {
if (is.na(datubasea[galdera, i]) || is.na(datubasea[galdera, j]) ||
datubasea[galdera, i] == "" || datubasea[galdera, j] == "") {
distantzia <- 1
} else {
distantzia <- bilbao_d(strsplit(datubasea[galdera, i], ",")[[1]],
strsplit(datubasea[galdera, j], ",")[[1]])
}
pisuak <- membership[i, c1] * membership[j, c2]
pisuen_batura <- pisuen_batura + pisuak
batura <- batura + distantzia * pisuak
}
}
return(ifelse(pisuen_batura > 0, batura / pisuen_batura, NA))
}
kalkulatu_diferentziazioa <- function(datubasea, membership, galdera, cluster1, cluster2) {
estabilitatea1 <- kalkulatu_estabilitatea(datubasea, membership, galdera, cluster1)
estabilitatea2 <- kalkulatu_estabilitatea(datubasea, membership, galdera, cluster2)
if (is.na(estabilitatea1) || is.na(estabilitatea2)) return(NA)
bariabilitatea1_2 <- kalkulatu_bariabilitatea(datubasea, membership, galdera, cluster1, cluster2)
return(bariabilitatea1_2 / max(estabilitatea1, estabilitatea2, 1e-6))
}
get_most_relevant_items <- function(datubasea, clusteringResult, c1, c2){
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
# indices1 <- c1[[2]]
# indices2 <- c2[[2]]
diferentziazioak <- numeric(length(datubasea))
for (galdera in 1:dim(datubasea)[1]) {
diferentziazioak[galdera] <- kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
}
sorted_indices <- order(diferentziazioak, decreasing = TRUE)
top3_items <- sorted_indices[1:3]
cluster1_items <- list()
for (i in 1:3){
cluster1_items[[i]] <- datubasea[top3_items[i], indices1]
}
cluster2_items <- list()
for (i in 1:3){
cluster2_items[[i]] <- datubasea[top3_items[i], indices2]
}
return(c(cluster1_items, cluster2_items))
}
data <- read.csv('/Volumes/MacOS 1TB/Repos/Dialektoak_praktika-1/Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/Matriz-distancias del ESB-Diatech z-24-04-02.csv', stringsAsFactors = FALSE)
questions <- read.csv('/Volumes/MacOS 1TB/Repos/Dialektoak_praktika-1/Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/question.csv', stringsAsFactors = FALSE, sep = ";")
answers <- as.matrix(read.csv('/Volumes/MacOS 1TB/Repos/Dialektoak_praktika-1/Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/ESB-datu-basea-taula.csv', stringsAsFactors = FALSE, row.names=1))
datubasea <- answers
questions <- questions[4][[1]]
numericData <- data
numericData <- numericData[sapply(numericData, is.numeric)] # Filter numeric columns
numericData[is.na(numericData)] <- 0 # Replace NA with 0
distMatrix <- dist(numericData) # Compute distance matrix
clusteringResult <- fanny(distMatrix, k = 10, memb.exp = 1.2)
clusterLabels <- unique(clusteringResult$clustering)
c1 = 2
c2 = 4
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
diferentziazioak <- numeric(NROW(datubasea))
for (galdera in 1:dim(datubasea)[1]) {
diferentziazioak[galdera] <- kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
}
sorted_indices <- order(diferentziazioak, decreasing = TRUE)
top3_items <- sorted_indices[1:3]
questions[top3_items]
cluster1_items <- datubasea[top3_items, indices1]
cluster2_items <- datubasea[top3_items, indices2]
top_questions <- questions[top3_items]
get_most_relevant_items <- function(datubasea, clusteringResult, c1, c2){
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
# indices1 <- c1[[2]]
# indices2 <- c2[[2]]
diferentziazioak <- numeric(length(datubasea))
for (galdera in 1:dim(datubasea)[1]) {
diferentziazioak[galdera] <- kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
}
sorted_indices <- order(diferentziazioak, decreasing = TRUE)
top3_items <- sorted_indices[1:3]
top_questions <- questions[top3_items]
cluster1_items <- datubasea[top3_items, indices1]
cluster2_items <- datubasea[top3_items, indices2]
return(c(top_questions, cluster1_items, cluster2_items))
}
get_most_relevant_items(datubasea, clusteringResult, c1, c2)
get_most_relevant_items <- function(datubasea, clusteringResult, c1, c2){
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
# indices1 <- c1[[2]]
# indices2 <- c2[[2]]
diferentziazioak <- numeric(length(datubasea))
for (galdera in 1:dim(datubasea)[1]) {
diferentziazioak[galdera] <- kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
}
sorted_indices <- order(diferentziazioak, decreasing = TRUE)
top3_items <- sorted_indices[1:3]
top_questions <- questions[top3_items]
cluster1_items <- datubasea[top3_items, indices1]
cluster2_items <- datubasea[top3_items, indices2]
return(top_questions, cluster1_items, cluster2_items)
}
get_most_relevant_items(datubasea, clusteringResult, c1, c2)
output$top_questions <- top_questions
get_most_relevant_items <- function(datubasea, clusteringResult, c1, c2){
req(relevant_items_output)
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
# indices1 <- c1[[2]]
# indices2 <- c2[[2]]
diferentziazioak <- numeric(length(datubasea))
for (galdera in 1:dim(datubasea)[1]) {
diferentziazioak[galdera] <- kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
}
sorted_indices <- order(diferentziazioak, decreasing = TRUE)
top3_items <- sorted_indices[1:3]
top_questions <- questions[top3_items]
cluster1_items <- datubasea[top3_items, indices1]
cluster2_items <- datubasea[top3_items, indices2]
relevant_items_output$top_questions <- top_questions
relevant_items_output$cluster1_items <- cluster1_items
relevant_items_output$cluster2_items <- cluster2_items
return(top_questions, cluster1_items, cluster2_items)
}
get_most_relevant_items(datubasea, clusteringResult, c1, c2)
get_most_relevant_items <- function(datubasea, clusteringResult, c1, c2){
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
# indices1 <- c1[[2]]
# indices2 <- c2[[2]]
diferentziazioak <- numeric(length(datubasea))
for (galdera in 1:dim(datubasea)[1]) {
diferentziazioak[galdera] <- kalkulatu_diferentziazioa(datubasea, membership, galdera, cluster1, cluster2)
}
sorted_indices <- order(diferentziazioak, decreasing = TRUE)
top3_items <- sorted_indices[1:3]
top_questions <- questions[top3_items]
cluster1_items <- datubasea[top3_items, indices1]
cluster2_items <- datubasea[top3_items, indices2]
output <- list("top_questions" = top_questions, "cluster1_items" = cluster1_items, "cluster2_items" = "cluster2_items")
return(output)
}
get_most_relevant_items(datubasea, clusteringResult, c1, c2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("stringr")
runApp()
