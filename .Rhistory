end.time <- Sys.time()
time.taken <- end.time - start.time
# return(emaitza)
return(time.taken)
}
testFunctionRelevant(get_most_relevant_items)
get_most_relevant_items_optimized <- function(answers, questions, clusteringResult, c1, c2, n, distantzia_funtzioa, set_progress) {
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
names <- rownames(clusteringResult$membership)
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
# Function to calculate differentiation for a single question
calculate_differentiation_for_question <- function(galdera) {
kalkulatu_diferentziazioa(answers, membership, galdera, cluster1, cluster2, distantzia_funtzioa)
}
# Create cluster for parallel processing
no_cores <- detectCores() - 1  # Use all but one core
cl <- makeCluster(no_cores)
# Export necessary objects to each cluster
clusterExport(cl,
varlist = c("answers", "membership", "cluster1", "cluster2", "distantzia_funtzioa",
"kalkulatu_diferentziazioa"),
envir = environment())
# Calculate differentiations in parallel
diferentziazioak_list <- parLapply(cl, 1:dim(answers)[1], calculate_differentiation_for_question)
# Stop the cluster
stopCluster(cl)
# Combine results
diferentziazioak <- do.call(rbind, diferentziazioak_list)
# Remaining steps as in the original function
diferentziazioak <- diferentziazioak[order(-diferentziazioak$diferentziazioa), ]
topn_items <- head(diferentziazioak, n)
cluster1_items <- answers[topn_items$galdera, indices1]
cluster2_items <- answers[topn_items$galdera, indices2]
top_questions <- questions[topn_items$galdera]
topn_items$galdera <- top_questions
colnames(cluster1_items) <- names(indices1)
colnames(cluster2_items) <- names(indices2)
output <- list("top_questions" = topn_items, "cluster1_items" = cluster1_items, "cluster2_items" = cluster2_items)
return(output)
}
get_most_relevant_items <- function(answers, questions, clusteringResult, c1, c2, n, distantzia_funtzioa, set_progress){
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
names <- rownames(clusteringResult$membership)
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
diferentziazioak <- data.frame()
k <- dim(answers)[1]
for (galdera in 1:k) {
uneko_dif <- kalkulatu_diferentziazioa(answers, membership, galdera, cluster1, cluster2, distantzia_funtzioa)
diferentziazioak <- rbind(diferentziazioak, uneko_dif)
set_progress(galdera/k)
}
diferentziazioak <- diferentziazioak[order(-diferentziazioak$diferentziazioa), ]
topn_items <- head(diferentziazioak, n)
cluster1_items <- answers[topn_items$galdera, indices1]
cluster2_items <- answers[topn_items$galdera, indices2]
top_questions <- questions[topn_items$galdera]
topn_items$galdera <- top_questions
colnames(cluster1_items) <- names(indices1)
colnames(cluster2_items) <- names(indices2)
output <- list("top_questions" = topn_items, "cluster1_items" = cluster1_items, "cluster2_items" = cluster2_items)
return(output)
}
testFunctionRelevant <- function(relevant_function){
start.time <- Sys.time()
emaitza <- relevant_function(answers, questions, clusteringResult, cluster1, cluster2, n, selected_distance_function, 0)
end.time <- Sys.time()
time.taken <- end.time - start.time
# return(emaitza)
return(time.taken)
}
testFunctionRelevant(get_most_relevant_items)
testFunctionRelevant <- function(relevant_function){
start.time <- Sys.time()
emaitza <- relevant_function(answers, questions, clusteringResults, cluster1, cluster2, n, selected_distance_function, 0)
end.time <- Sys.time()
time.taken <- end.time - start.time
# return(emaitza)
return(time.taken)
}
testFunctionRelevant(get_most_relevant_items)
testFunctionRelevant <- function(relevant_function){
start.time <- Sys.time()
emaitza <- relevant_function(answers, questions, clusteringResults, 1, 2, n, selected_distance_function, 0)
end.time <- Sys.time()
time.taken <- end.time - start.time
# return(emaitza)
return(time.taken)
}
testFunctionRelevant(get_most_relevant_items)
get_most_relevant_items <- function(answers, questions, clusteringResult, c1, c2, n, distantzia_funtzioa){
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
names <- rownames(clusteringResult$membership)
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
diferentziazioak <- data.frame()
k <- dim(answers)[1]
for (galdera in 1:k) {
uneko_dif <- kalkulatu_diferentziazioa(answers, membership, galdera, cluster1, cluster2, distantzia_funtzioa)
diferentziazioak <- rbind(diferentziazioak, uneko_dif)
}
diferentziazioak <- diferentziazioak[order(-diferentziazioak$diferentziazioa), ]
topn_items <- head(diferentziazioak, n)
cluster1_items <- answers[topn_items$galdera, indices1]
cluster2_items <- answers[topn_items$galdera, indices2]
top_questions <- questions[topn_items$galdera]
topn_items$galdera <- top_questions
colnames(cluster1_items) <- names(indices1)
colnames(cluster2_items) <- names(indices2)
output <- list("top_questions" = topn_items, "cluster1_items" = cluster1_items, "cluster2_items" = cluster2_items)
return(output)
}
get_most_relevant_items_optimized <- function(answers, questions, clusteringResult, c1, c2, n, distantzia_funtzioa) {
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
names <- rownames(clusteringResult$membership)
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
# Function to calculate differentiation for a single question
calculate_differentiation_for_question <- function(galdera) {
kalkulatu_diferentziazioa(answers, membership, galdera, cluster1, cluster2, distantzia_funtzioa)
}
# Create cluster for parallel processing
no_cores <- detectCores() - 1  # Use all but one core
cl <- makeCluster(no_cores)
# Export necessary objects to each cluster
clusterExport(cl,
varlist = c("answers", "membership", "cluster1", "cluster2", "distantzia_funtzioa",
"kalkulatu_diferentziazioa"),
envir = environment())
# Calculate differentiations in parallel
diferentziazioak_list <- parLapply(cl, 1:dim(answers)[1], calculate_differentiation_for_question)
# Stop the cluster
stopCluster(cl)
# Combine results
diferentziazioak <- do.call(rbind, diferentziazioak_list)
# Remaining steps as in the original function
diferentziazioak <- diferentziazioak[order(-diferentziazioak$diferentziazioa), ]
topn_items <- head(diferentziazioak, n)
cluster1_items <- answers[topn_items$galdera, indices1]
cluster2_items <- answers[topn_items$galdera, indices2]
top_questions <- questions[topn_items$galdera]
topn_items$galdera <- top_questions
colnames(cluster1_items) <- names(indices1)
colnames(cluster2_items) <- names(indices2)
output <- list("top_questions" = topn_items, "cluster1_items" = cluster1_items, "cluster2_items" = cluster2_items)
return(output)
}
get_most_relevant_items <- function(answers, questions, clusteringResult, c1, c2, n, distantzia_funtzioa){
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
names <- rownames(clusteringResult$membership)
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
diferentziazioak <- data.frame()
k <- dim(answers)[1]
for (galdera in 1:k) {
uneko_dif <- kalkulatu_diferentziazioa(answers, membership, galdera, cluster1, cluster2, distantzia_funtzioa)
diferentziazioak <- rbind(diferentziazioak, uneko_dif)
}
diferentziazioak <- diferentziazioak[order(-diferentziazioak$diferentziazioa), ]
topn_items <- head(diferentziazioak, n)
cluster1_items <- answers[topn_items$galdera, indices1]
cluster2_items <- answers[topn_items$galdera, indices2]
top_questions <- questions[topn_items$galdera]
topn_items$galdera <- top_questions
colnames(cluster1_items) <- names(indices1)
colnames(cluster2_items) <- names(indices2)
output <- list("top_questions" = topn_items, "cluster1_items" = cluster1_items, "cluster2_items" = cluster2_items)
return(output)
}
testFunctionRelevant <- function(relevant_function){
start.time <- Sys.time()
emaitza <- relevant_function(answers, questions, clusteringResults, 1, 2, n, selected_distance_function)
end.time <- Sys.time()
time.taken <- end.time - start.time
# return(emaitza)
return(time.taken)
}
testFunctionRelevant(get_most_relevant_items)
clusteringResults <- fanny(distmatrix, k = 25, memb.exp = 1.2)
testFunctionRelevant <- function(relevant_function){
start.time <- Sys.time()
emaitza <- relevant_function(answers, questions, clusteringResults, 1, 2, 15, selected_distance_function)
end.time <- Sys.time()
time.taken <- end.time - start.time
# return(emaitza)
return(time.taken)
}
testFunctionRelevant(get_most_relevant_items)
testFunctionRelevant(get_most_relevant_items_optimized)
library(matrixStats)
bilbao_d <- function(items1, items2) {
bat <- sum(items1 %in% items2) + sum(items2 %in% items1)
result <- 1 - (bat / (length(items1) + length(items2)))
return(result)
}
kalkulatu_estabilitatea <- function(answers, membership, galdera, cluster, distantzia_funtzioa) {
c <- cluster[[1]]
elementuak <- cluster[[2]]
n <- length(elementuak)
# Extract relevant answers and membership values
answers_subset <- answers[galdera, elementuak, drop = FALSE]
membership_subset <- membership[elementuak, c]
# Create a distance matrix using outer() and vectorized distance function
distance_matrix <- outer(answers_subset, answers_subset, Vectorize(function(x, y) {
if (is.na(x) || is.na(y) || x == "" || y == "") {
return(1)
} else {
return(distantzia_funtzioa(strsplit(x, ",")[[1]], strsplit(y, ",")[[1]]))
}
}))
# Create a matrix of weights
weights_matrix <- outer(membership_subset, membership_subset, "*")
# Calculate the weighted sum of distances
weighted_sum <- sum(distance_matrix * weights_matrix, na.rm = TRUE)
# Calculate the sum of weights
sum_weights <- sum(weights_matrix, na.rm = TRUE)
# Calculate the stability
if (sum_weights == 0) {
return(NA)
} else {
return(2 * weighted_sum / sum_weights)
}
}
kalkulatu_bariabilitatea <- function(answers, membership, galdera, cluster1, cluster2, distantzia_funtzioa) {
c1 <- cluster1[[1]]
elementuak1 <- cluster1[[2]]
c2 <- cluster2[[1]]
elementuak2 <- cluster2[[2]]
# Extract relevant answers and membership values
answers_subset1 <- answers[galdera, elementuak1, drop = FALSE]
answers_subset2 <- answers[galdera, elementuak2, drop = FALSE]
membership_subset1 <- membership[elementuak1, c1]
membership_subset2 <- membership[elementuak2, c2]
# Create a distance matrix using outer() and vectorized distance function
distance_matrix <- outer(answers_subset1, answers_subset2, Vectorize(function(x, y) {
if (is.na(x) || is.na(y) || x == "" || y == "") {
return(1)
} else {
return(distantzia_funtzioa(strsplit(x, ",")[[1]], strsplit(y, ",")[[1]]))
}
}))
# Create a matrix of weights
weights_matrix <- outer(membership_subset1, membership_subset2, "*")
# Calculate the weighted sum of distances
weighted_sum <- sum(distance_matrix * weights_matrix, na.rm = TRUE)
# Calculate the sum of weights
sum_weights <- sum(weights_matrix, na.rm = TRUE)
# Calculate the variability
if (sum_weights == 0) {
return(NA)
} else {
return(weighted_sum / sum_weights)
}
}
library(matrixStats)
bilbao_d <- function(items1, items2) {
bat <- sum(items1 %in% items2) + sum(items2 %in% items1)
result <- 1 - (bat / (length(items1) + length(items2)))
return(result)
}
kalkulatu_estabilitatea <- function(answers, membership, galdera, cluster, distantzia_funtzioa) {
c <- cluster[[1]]
elementuak <- cluster[[2]]
n <- length(elementuak)
# Extract relevant answers and membership values
answers_subset <- answers[galdera, elementuak, drop = FALSE]
membership_subset <- membership[elementuak, c]
# Create a distance matrix using outer() and vectorized distance function
distance_matrix <- outer(answers_subset, answers_subset, Vectorize(function(x, y) {
if (is.na(x) || is.na(y) || x == "" || y == "") {
return(1)
} else {
return(distantzia_funtzioa(strsplit(x, ",")[[1]], strsplit(y, ",")[[1]]))
}
}))
# Create a matrix of weights
weights_matrix <- outer(membership_subset, membership_subset, "*")
# Calculate the weighted sum of distances
weighted_sum <- sum(distance_matrix * weights_matrix, na.rm = TRUE)
# Calculate the sum of weights
sum_weights <- sum(weights_matrix, na.rm = TRUE)
# Calculate the stability
if (sum_weights == 0) {
return(NA)
} else {
return(2 * weighted_sum / sum_weights)
}
}
kalkulatu_bariabilitatea <- function(answers, membership, galdera, cluster1, cluster2, distantzia_funtzioa) {
c1 <- cluster1[[1]]
elementuak1 <- cluster1[[2]]
c2 <- cluster2[[1]]
elementuak2 <- cluster2[[2]]
# Extract relevant answers and membership values
answers_subset1 <- answers[galdera, elementuak1, drop = FALSE]
answers_subset2 <- answers[galdera, elementuak2, drop = FALSE]
membership_subset1 <- membership[elementuak1, c1]
membership_subset2 <- membership[elementuak2, c2]
# Create a distance matrix using outer() and vectorized distance function
distance_matrix <- outer(answers_subset1, answers_subset2, Vectorize(function(x, y) {
if (is.na(x) || is.na(y) || x == "" || y == "") {
return(1)
} else {
return(distantzia_funtzioa(strsplit(x, ",")[[1]], strsplit(y, ",")[[1]]))
}
}))
# Create a matrix of weights
weights_matrix <- outer(membership_subset1, membership_subset2, "*")
# Calculate the weighted sum of distances
weighted_sum <- sum(distance_matrix * weights_matrix, na.rm = TRUE)
# Calculate the sum of weights
sum_weights <- sum(weights_matrix, na.rm = TRUE)
# Calculate the variability
if (sum_weights == 0) {
return(NA)
} else {
return(weighted_sum / sum_weights)
}
}
kalkulatu_diferentziazioa <- function(answers, membership, galdera, cluster1, cluster2, distantzia_funtzioa) {
estabilitatea1 <- kalkulatu_estabilitatea(answers, membership, galdera, cluster1, distantzia_funtzioa)
estabilitatea2 <- kalkulatu_estabilitatea(answers, membership, galdera, cluster2, distantzia_funtzioa)
if (is.na(estabilitatea1) || is.na(estabilitatea2)) return(NA)
bariabilitatea1_2 <- kalkulatu_bariabilitatea(answers, membership, galdera, cluster1, cluster2, distantzia_funtzioa)
diferentziazioa = bariabilitatea1_2 / max(estabilitatea1, estabilitatea2, 0.01)
return (data.frame(galdera = galdera, diferentziazioa = diferentziazioa, estabilitatea_1 = estabilitatea1, estabilitatea_2= estabilitatea2, bariabilitatea1_2= bariabilitatea1_2))
}
get_most_relevant_items_optimized <- function(answers, questions, clusteringResult, c1, c2, n, distantzia_funtzioa) {
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
names <- rownames(clusteringResult$membership)
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
# Function to calculate differentiation for a single question
calculate_differentiation_for_question <- function(galdera) {
kalkulatu_diferentziazioa(answers, membership, galdera, cluster1, cluster2, distantzia_funtzioa)
}
# Create cluster for parallel processing
no_cores <- detectCores() - 1  # Use all but one core
cl <- makeCluster(no_cores)
# Export necessary objects to each cluster
clusterExport(cl,
varlist = c("answers", "membership", "cluster1", "cluster2", "distantzia_funtzioa",
"kalkulatu_diferentziazioa"),
envir = environment())
# Calculate differentiations in parallel
diferentziazioak_list <- parLapply(cl, 1:dim(answers)[1], calculate_differentiation_for_question)
# Stop the cluster
stopCluster(cl)
# Combine results
diferentziazioak <- do.call(rbind, diferentziazioak_list)
# Remaining steps as in the original function
diferentziazioak <- diferentziazioak[order(-diferentziazioak$diferentziazioa), ]
topn_items <- head(diferentziazioak, n)
cluster1_items <- answers[topn_items$galdera, indices1]
cluster2_items <- answers[topn_items$galdera, indices2]
top_questions <- questions[topn_items$galdera]
topn_items$galdera <- top_questions
colnames(cluster1_items) <- names(indices1)
colnames(cluster2_items) <- names(indices2)
output <- list("top_questions" = topn_items, "cluster1_items" = cluster1_items, "cluster2_items" = cluster2_items)
return(output)
}
get_most_relevant_items <- function(answers, questions, clusteringResult, c1, c2, n, distantzia_funtzioa){
clusters <- clusteringResult$clustering
membership <- clusteringResult$membership
names <- rownames(clusteringResult$membership)
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
diferentziazioak <- data.frame()
k <- dim(answers)[1]
for (galdera in 1:k) {
uneko_dif <- kalkulatu_diferentziazioa(answers, membership, galdera, cluster1, cluster2, distantzia_funtzioa)
diferentziazioak <- rbind(diferentziazioak, uneko_dif)
}
diferentziazioak <- diferentziazioak[order(-diferentziazioak$diferentziazioa), ]
topn_items <- head(diferentziazioak, n)
cluster1_items <- answers[topn_items$galdera, indices1]
cluster2_items <- answers[topn_items$galdera, indices2]
top_questions <- questions[topn_items$galdera]
topn_items$galdera <- top_questions
colnames(cluster1_items) <- names(indices1)
colnames(cluster2_items) <- names(indices2)
output <- list("top_questions" = topn_items, "cluster1_items" = cluster1_items, "cluster2_items" = cluster2_items)
return(output)
}
answers <- read.csv("Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/ESB-datu-basea-taula.csv",
stringsAsFactors = FALSE, row.names = 1)
location <- read.csv("Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/location.csv", sep= ';', header = FALSE, col.names = c("ID", "Town", 'X1', 'X2'))
distmatrix <- read.csv("Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/Matriz-distancias del ESB-Diatech z-24-04-02.csv",
row.names = 1)
questions <- read.csv("Datu-basea_ euskalkien ezaugarri adierazgarriak eta bereizgarriak/question.csv",
stringsAsFactors = FALSE, sep = ";")[4][[1]]
clean_names <- function(name) {
sub("-(\\d+)$", "", name)
}
rownames(distmatrix) <- sapply(rownames(distmatrix), clean_names)
colnames(distmatrix) <- sapply(rownames(distmatrix), clean_names)
correct_order <- as.data.frame(location)$Town
# Reorder the rows and columns of the distance matrix
distmatrix <- distmatrix[correct_order, correct_order]
clusteringResults <- fanny(distmatrix, k = 25, memb.exp = 1.2)
selected_distance_function <- bilbao_d
clusters <- clusteringResults$clustering
membership <- clusteringResults$membership
names <- rownames(clusteringResults$membership)
c1 <- 1
c2 <- 3
indices1 <- which(clusters == c1)
indices2 <- which(clusters == c2)
cluster1 <- list(c1, indices1)
cluster2 <- list(c2, indices2)
testFunction <- function(kalkulatu_estabilitatea_function, n){
start.time <- Sys.time()
for(i in 1:n){
emaitza <- kalkulatu_estabilitatea_function(answers, membership, 6, cluster1, selected_distance_function)
}
end.time <- Sys.time()
time.taken <- end.time - start.time
return(emaitza)
return(time.taken)
}
testFunction2 <- function(kalkulatu_bariabilitatea_function, n){
start.time <- Sys.time()
for(i in 1:n){
emaitza <- kalkulatu_bariabilitatea_function(answers, membership, 15, cluster1, cluster2, selected_distance_function)
}
end.time <- Sys.time()
time.taken <- end.time - start.time
return(emaitza)
return(time.taken)
}
testFunction(kalkulatu_estabilitatea, 1)
testFunction(kalkulatu_estabilitatea_optimized, 1)
testFunction2(kalkulatu_bariabilitatea, 1)
testFunction2(kalkulatu_bariabilitatea_optimized, 1)
levenshtein_d <- function(items1, items2) {
distances <- outer(items1, items2, Vectorize(function(a, b) stringdist(a, b, method = "lv")))
max_length <- max(c(nchar(unlist(items1)), nchar(unlist(items2))), na.rm = TRUE)
if (max_length == 0) return(1)
total_distance <- sum(distances, na.rm = TRUE)
normalized_distance <- total_distance / (length(items1) * length(items2) * max_length)
return(normalized_distance)
}
levenshtein_d_optimized <- function(items1, items2) {
# Calculate Levenshtein distances using stringdistmatrix
distances <- stringdistmatrix(items1, items2, method = "lv")
# Calculate maximum string length
max_length <- max(nchar(c(items1, items2)), na.rm = TRUE)
if (max_length == 0) return(1)
# Calculate normalized distance
normalized_distance <- sum(distances, na.rm = TRUE) / (length(items1) * length(items2) * max_length)
return(normalized_distance)
}
bilbao_d <- function(items1, items2) {
bat <- sum(items1 %in% items2) + sum(items2 %in% items1)
result <- 1 - (bat / (length(items1) + length(items2)))
return(result)
}
items1 = c('a', 'b', 'a', 'b', 'a', 'b', 'a', 'b')
items1 = c('a', 'b', 'a', 'b', 'a', 'b', 'a', 'b')
items2 = c('a', 'ab', 'a', 'ab', 'a', 'ab', 'a', 'ab', 'a', 'ab')
testFunctionDistance <- function(distance_funciton, n){
start.time <- Sys.time()
for(i in 1:n){
emaitza <- distance_funciton(items1, items2)
}
end.time <- Sys.time()
time.taken <- end.time - start.time
# return(emaitza)
return(time.taken)
}
testFunctionDistance(levenshtein_d, 1000)
testFunctionDistance(levenshtein_d_optimized, 1000)
testFunctionDistance(bilbao_d, 1000)
testFunctionRelevant <- function(relevant_function){
start.time <- Sys.time()
emaitza <- relevant_function(answers, questions, clusteringResults, 1, 2, 15, selected_distance_function)
end.time <- Sys.time()
time.taken <- end.time - start.time
# return(emaitza)
return(time.taken)
}
testFunctionRelevant(get_most_relevant_items)
testFunctionRelevant(get_most_relevant_items_optimized)
testFunctionRelevant(get_most_relevant_items)
testFunctionRelevant(get_most_relevant_items_optimized)
runApp()
runApp()
runApp()
runApp()
runApp()
